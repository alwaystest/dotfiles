" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'embear/vim-foldsearch'
Plug 'scrooloose/vim-slumlord'
Plug 'aklt/plantuml-syntax'
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Yggdroot/indentLine'
Plug 'luochen1990/rainbow'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-syntastic/syntastic'
Plug 'jiangmiao/auto-pairs'
Plug 'sbdchd/neoformat'
Plug 'easymotion/vim-easymotion'
Plug 'vim-test/vim-test'
Plug 'jebaum/vim-tmuxify'
Plug 'github/copilot.vim'
Plug 'dhruvasagar/vim-table-mode'
Plug 'rickhowe/diffchar.vim'
Plug 'liuchengxu/vista.vim'

" Defx
if has('nvim')
  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/defx.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'kristijanhusak/defx-icons'
endif

Plug 'honza/vim-snippets'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'masukomi/vim-markdown-folding'

" Initialize plugin system
call plug#end()

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
command! ProjectFiles execute 'Files' s:find_git_root()

if OSX()
    " fzf
    let g:ctrlp_map = ''
    nnoremap <C-p> :Files<CR>
    nnoremap <leader>b :Buffers<CR>
    nnoremap <leader>m :Marks<CR>
    nnoremap <leader>r :Rg<CR>
endif
color gruvbox
:map <F1> <nop>

" Plugins {

    " defx {

        if isdirectory(expand("~/.vim/plugged/defx.nvim"))

            call defx#custom#option('_', {
                  \ 'columns': 'mark:indent:icons:filename:type',
                  \ 'winwidth': 30,
                  \ 'split': 'vertical',
                  \ 'direction': 'topleft',
                  \ 'show_ignored_files': 0,
                  \ 'ignored_files': '*.pyc,*.pyd,*~,*.swo,*.swp,.git,.hg,.svn,.bzr,.DS_Store',
                  \ })

            call defx#custom#column('mark', {
                  \ 'readonly_icon': '',
                  \ 'selected_icon': '✓',
                  \ })

            call defx#custom#column('filename', {
                  \ 'min_width': 5,
                  \ 'max_width': 25,
                  \ })

            call defx#custom#column('time', {
                  \ 'format': '%Y %b %e %H:%M:%S',
                  \ })

            " let g:vimfiler_as_default_explorer = 1

            function! s:defx_toggle_tree_or_open_file() abort
              if defx#is_directory()
                return defx#do_action('open_or_close_tree')
              else
                return defx#do_action('drop')
              endif
            endfunction

            function! s:defx_cd_or_open_file() abort
              if defx#is_directory()
                return defx#do_action('open_directory')
              else
                return defx#do_action('drop')
              endif
            endfunction

            function! s:defx_keymaps() abort
              " double click/Enter/l to open file
              nnoremap <silent><buffer><expr> <2-LeftMouse> <sid>defx_toggle_tree_or_open_file()
              nnoremap <silent><buffer><expr> <CR> <sid>defx_toggle_tree_or_open_file()
              nnoremap <silent><buffer><expr> l    <sid>defx_cd_or_open_file()

              nnoremap <silent><buffer><expr> q     defx#do_action('quit')
              nnoremap <silent><buffer><expr> .     defx#do_action('toggle_ignored_files')
              nnoremap <silent><buffer><expr> yy    defx#do_action('yank_path')
              nnoremap <silent><buffer><expr> ~     defx#do_action('cd')
              nnoremap <silent><buffer><expr><nowait> \  defx#do_action('cd', getcwd())
              nnoremap <silent><buffer><expr> h     defx#do_action('cd', ['..'])

              nnoremap <silent><buffer><expr><nowait> <Space> defx#do_action('toggle_select') . 'j'
              nnoremap <silent><buffer><expr> *      defx#do_action('toggle_select_all')
              nnoremap <silent><buffer><expr> <C-c>  defx#do_action('clear_select_all')
              nnoremap <silent><buffer><expr> <C-r>  defx#do_action('redraw')
              nnoremap <silent><buffer><expr> <C-g>  defx#do_action('print')

              nnoremap <silent><buffer><expr> K     defx#do_action('new_directory')
              nnoremap <silent><buffer><expr> N     defx#do_action('new_multiple_files')
              nnoremap <silent><buffer><expr> dd    defx#do_action('remove')
              nnoremap <silent><buffer><expr> r     defx#do_action('rename')
              nnoremap <silent><buffer><expr> !     defx#do_action('execute_command')
              nnoremap <silent><buffer><expr><nowait> c  defx#do_action('copy')
              nnoremap <silent><buffer><expr><nowait> m  defx#do_action('move')
              nnoremap <silent><buffer><expr><nowait> p  defx#do_action('paste')

              nnoremap <silent><buffer><expr> S  defx#do_action('toggle_sort', 'time')
              nnoremap <silent><buffer><expr> >  defx#do_action('resize',  defx#get_context().winwidth + 10)
              nnoremap <silent><buffer><expr> <  defx#do_action('resize',  defx#get_context().winwidth - 10)
            endfunction

            " Ref:
            " https://github.com/Shougo/vimfiler.vim/blob/edbb2f2e6baa66c51f73a82afa2bb740415a64ea/plugin/vimfiler.vim#L72
            " https://github.com/Shougo/defx.nvim/issues/121
            function! s:browse() abort
              let l:path = expand('<amatch>')
              if l:path ==# '' || bufnr('%') != expand('<abuf>')
                return
              endif

              if &filetype ==# 'defx' && line('$') != 1
                return
              endif

              if !isdirectory(l:path)
                return
              endif

              bd
              exe ':Defx -split=no -columns=mark:indent:icons:filename:type:size:time ' . l:path
            endfunction

            " disable netrw.
            augroup FileExplorer
              autocmd!
            augroup END

            augroup defx_group
              autocmd!
              " auto close if it is the last
              autocmd BufEnter * if (&buftype ==# 'defx' || &buftype ==# 'nofile')
                    \ && (!has('vim_starting'))
                    \ && winbufnr(2) == -1 | quit! | endif
              " Move focus to the next window if current buffer is defx
              autocmd TabLeave * if &ft ==# 'defx' | wincmd w | endif
              " keymap
              autocmd FileType defx do WinEnter | call s:defx_keymaps()
              " replace netrw to defx
              autocmd BufEnter * call s:browse()
            augroup END

            map <C-e> :Defx -toggle<CR>
            " locate current file in defx
            nnoremap <silent> <Leader>a  :<C-u>Defx `escape(expand('%:p:h'), ' :')` -search=`expand('%:p')`<CR>
        endif
    " }

    " test {
      " run test cases in current file
      nmap <silent> t<C-f> :TestFile<CR>

      " make test commands execute using dispatch.vim
      let test#strategy = "tmuxify"
    " }
    "
    " terminal {
      " 使用 <Leader>ft 打开浮动终端
      nnoremap <Leader>ft :call OpenFloatingTerm()<CR>

      function! OpenFloatingTerm()
        let height = float2nr((&lines - 2) * 0.6)
        let row = float2nr((&lines - height) / 2)
        let width = float2nr(&columns * 0.6)
        let col = float2nr((&columns - width) / 2)
        let opts = {
              \ 'relative': 'editor',
              \ 'row': row,
              \ 'col': col,
              \ 'width': width,
              \ 'height': height,
              \ 'style': 'minimal'
              \ }
        let buf = nvim_create_buf(v:false, v:true)
        let win = nvim_open_win(buf, v:true, opts)
        terminal
        startinsert
      endfunction

      " 使用 <Leader>t 在下方打开一个水平分割的终端
      nnoremap <Leader>t :split term://zsh<CR>

      " 使用 <Leader>vt 在右侧打开一个垂直分割的终端
      nnoremap <Leader>vt :vsplit term://zsh<CR>

      " 使用 <Leader>q 快速关闭终端
      tnoremap <Leader>q <C-\><C-n>:q!<CR>

      " 使用 Esc 键从终端模式退出到普通模式
      tnoremap <Esc> <C-\><C-n>
    " }
    "
    " Vista {
      nnoremap <silent> <Leader>v :Vista!!<CR>
      " 设置 Vista 的宽度
      let g:vista_sidebar_width = 50

      " 设置默认的执行器（可以是 ctags 或 vim_lsp）
      let g:vista_default_executive = 'coc'

      " 设置图标
      let g:vista#renderer#enable_icon = 1
    " }
    "
    " foldsearch {
      let g:foldsearch_disable_mappings = 1
    " }
" }
